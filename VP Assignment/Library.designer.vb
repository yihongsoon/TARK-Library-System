'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Library")>  _
Partial Public Class LibraryDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertStudent(instance As Student)
    End Sub
  Partial Private Sub UpdateStudent(instance As Student)
    End Sub
  Partial Private Sub DeleteStudent(instance As Student)
    End Sub
  Partial Private Sub InsertBookFine(instance As BookFine)
    End Sub
  Partial Private Sub UpdateBookFine(instance As BookFine)
    End Sub
  Partial Private Sub DeleteBookFine(instance As BookFine)
    End Sub
  Partial Private Sub InsertAccount(instance As Account)
    End Sub
  Partial Private Sub UpdateAccount(instance As Account)
    End Sub
  Partial Private Sub DeleteAccount(instance As Account)
    End Sub
  Partial Private Sub InsertLendReturn(instance As LendReturn)
    End Sub
  Partial Private Sub UpdateLendReturn(instance As LendReturn)
    End Sub
  Partial Private Sub DeleteLendReturn(instance As LendReturn)
    End Sub
  Partial Private Sub InsertLogInTime(instance As LogInTime)
    End Sub
  Partial Private Sub UpdateLogInTime(instance As LogInTime)
    End Sub
  Partial Private Sub DeleteLogInTime(instance As LogInTime)
    End Sub
  Partial Private Sub InsertBook(instance As Book)
    End Sub
  Partial Private Sub UpdateBook(instance As Book)
    End Sub
  Partial Private Sub DeleteBook(instance As Book)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.VP_Assignment.My.MySettings.Default.LibraryConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
	
	Public ReadOnly Property BookFines() As System.Data.Linq.Table(Of BookFine)
		Get
			Return Me.GetTable(Of BookFine)
		End Get
	End Property
	
	Public ReadOnly Property Accounts() As System.Data.Linq.Table(Of Account)
		Get
			Return Me.GetTable(Of Account)
		End Get
	End Property
	
	Public ReadOnly Property LendReturns() As System.Data.Linq.Table(Of LendReturn)
		Get
			Return Me.GetTable(Of LendReturn)
		End Get
	End Property
	
	Public ReadOnly Property LogInTimes() As System.Data.Linq.Table(Of LogInTime)
		Get
			Return Me.GetTable(Of LogInTime)
		End Get
	End Property
	
	Public ReadOnly Property Books() As System.Data.Linq.Table(Of Book)
		Get
			Return Me.GetTable(Of Book)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Student")>  _
Partial Public Class Student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StudentID As String
	
	Private _StudentName As String
	
	Private _StudentHPNO As String
	
	Private _StudentStatus As String
	
	Private _StudentEmail As String
	
	Private _StudentFine As String
	
	Private _BookFines As EntitySet(Of BookFine)
	
	Private _LendReturns As EntitySet(Of LendReturn)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnStudentNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudentNameChanged()
    End Sub
    Partial Private Sub OnStudentHPNOChanging(value As String)
    End Sub
    Partial Private Sub OnStudentHPNOChanged()
    End Sub
    Partial Private Sub OnStudentStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStudentStatusChanged()
    End Sub
    Partial Private Sub OnStudentEmailChanging(value As String)
    End Sub
    Partial Private Sub OnStudentEmailChanged()
    End Sub
    Partial Private Sub OnStudentFineChanging(value As String)
    End Sub
    Partial Private Sub OnStudentFineChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookFines = New EntitySet(Of BookFine)(AddressOf Me.attach_BookFines, AddressOf Me.detach_BookFines)
		Me._LendReturns = New EntitySet(Of LendReturn)(AddressOf Me.attach_LendReturns, AddressOf Me.detach_LendReturns)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property StudentID() As String
		Get
			Return Me._StudentID
		End Get
		Set
			If (String.Equals(Me._StudentID, value) = false) Then
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentName() As String
		Get
			Return Me._StudentName
		End Get
		Set
			If (String.Equals(Me._StudentName, value) = false) Then
				Me.OnStudentNameChanging(value)
				Me.SendPropertyChanging
				Me._StudentName = value
				Me.SendPropertyChanged("StudentName")
				Me.OnStudentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentHPNO", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentHPNO() As String
		Get
			Return Me._StudentHPNO
		End Get
		Set
			If (String.Equals(Me._StudentHPNO, value) = false) Then
				Me.OnStudentHPNOChanging(value)
				Me.SendPropertyChanging
				Me._StudentHPNO = value
				Me.SendPropertyChanged("StudentHPNO")
				Me.OnStudentHPNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentStatus", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentStatus() As String
		Get
			Return Me._StudentStatus
		End Get
		Set
			If (String.Equals(Me._StudentStatus, value) = false) Then
				Me.OnStudentStatusChanging(value)
				Me.SendPropertyChanging
				Me._StudentStatus = value
				Me.SendPropertyChanged("StudentStatus")
				Me.OnStudentStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentEmail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentEmail() As String
		Get
			Return Me._StudentEmail
		End Get
		Set
			If (String.Equals(Me._StudentEmail, value) = false) Then
				Me.OnStudentEmailChanging(value)
				Me.SendPropertyChanging
				Me._StudentEmail = value
				Me.SendPropertyChanged("StudentEmail")
				Me.OnStudentEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentFine", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentFine() As String
		Get
			Return Me._StudentFine
		End Get
		Set
			If (String.Equals(Me._StudentFine, value) = false) Then
				Me.OnStudentFineChanging(value)
				Me.SendPropertyChanging
				Me._StudentFine = value
				Me.SendPropertyChanged("StudentFine")
				Me.OnStudentFineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_BookFine", Storage:="_BookFines", ThisKey:="StudentID", OtherKey:="StudentID")>  _
	Public Property BookFines() As EntitySet(Of BookFine)
		Get
			Return Me._BookFines
		End Get
		Set
			Me._BookFines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_LendReturn", Storage:="_LendReturns", ThisKey:="StudentID", OtherKey:="StudentID")>  _
	Public Property LendReturns() As EntitySet(Of LendReturn)
		Get
			Return Me._LendReturns
		End Get
		Set
			Me._LendReturns.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookFines(ByVal entity As BookFine)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_BookFines(ByVal entity As BookFine)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
	
	Private Sub attach_LendReturns(ByVal entity As LendReturn)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_LendReturns(ByVal entity As LendReturn)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BookFine")>  _
Partial Public Class BookFine
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookFineID As String
	
	Private _OverDueDate As Integer
	
	Private _FineValue As Double
	
	Private _BookFineStatus As String
	
	Private _BookID As String
	
	Private _StudentID As String
	
	Private _LendReturnID As String
	
	Private _Student As EntityRef(Of Student)
	
	Private _Book As EntityRef(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookFineIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookFineIDChanged()
    End Sub
    Partial Private Sub OnOverDueDateChanging(value As Integer)
    End Sub
    Partial Private Sub OnOverDueDateChanged()
    End Sub
    Partial Private Sub OnFineValueChanging(value As Double)
    End Sub
    Partial Private Sub OnFineValueChanged()
    End Sub
    Partial Private Sub OnBookFineStatusChanging(value As String)
    End Sub
    Partial Private Sub OnBookFineStatusChanged()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnLendReturnIDChanging(value As String)
    End Sub
    Partial Private Sub OnLendReturnIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Student = CType(Nothing, EntityRef(Of Student))
		Me._Book = CType(Nothing, EntityRef(Of Book))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookFineID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BookFineID() As String
		Get
			Return Me._BookFineID
		End Get
		Set
			If (String.Equals(Me._BookFineID, value) = false) Then
				Me.OnBookFineIDChanging(value)
				Me.SendPropertyChanging
				Me._BookFineID = value
				Me.SendPropertyChanged("BookFineID")
				Me.OnBookFineIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OverDueDate", DbType:="Int NOT NULL")>  _
	Public Property OverDueDate() As Integer
		Get
			Return Me._OverDueDate
		End Get
		Set
			If ((Me._OverDueDate = value)  _
						= false) Then
				Me.OnOverDueDateChanging(value)
				Me.SendPropertyChanging
				Me._OverDueDate = value
				Me.SendPropertyChanged("OverDueDate")
				Me.OnOverDueDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FineValue", DbType:="Float NOT NULL")>  _
	Public Property FineValue() As Double
		Get
			Return Me._FineValue
		End Get
		Set
			If ((Me._FineValue = value)  _
						= false) Then
				Me.OnFineValueChanging(value)
				Me.SendPropertyChanging
				Me._FineValue = value
				Me.SendPropertyChanged("FineValue")
				Me.OnFineValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookFineStatus", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BookFineStatus() As String
		Get
			Return Me._BookFineStatus
		End Get
		Set
			If (String.Equals(Me._BookFineStatus, value) = false) Then
				Me.OnBookFineStatusChanging(value)
				Me.SendPropertyChanging
				Me._BookFineStatus = value
				Me.SendPropertyChanged("BookFineStatus")
				Me.OnBookFineStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				If Me._Book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="VarChar(50)")>  _
	Public Property StudentID() As String
		Get
			Return Me._StudentID
		End Get
		Set
			If (String.Equals(Me._StudentID, value) = false) Then
				If Me._Student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LendReturnID", DbType:="VarChar(50)")>  _
	Public Property LendReturnID() As String
		Get
			Return Me._LendReturnID
		End Get
		Set
			If (String.Equals(Me._LendReturnID, value) = false) Then
				Me.OnLendReturnIDChanging(value)
				Me.SendPropertyChanging
				Me._LendReturnID = value
				Me.SendPropertyChanged("LendReturnID")
				Me.OnLendReturnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_BookFine", Storage:="_Student", ThisKey:="StudentID", OtherKey:="StudentID", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.BookFines.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookFines.Add(Me)
					Me._StudentID = value.StudentID
				Else
					Me._StudentID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_BookFine", Storage:="_Book", ThisKey:="BookID", OtherKey:="BookID", IsForeignKey:=true)>  _
	Public Property Book() As Book
		Get
			Return Me._Book.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book.Entity = Nothing
					previousValue.BookFines.Remove(Me)
				End If
				Me._Book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BookFines.Add(Me)
					Me._BookID = value.BookID
				Else
					Me._BookID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Book")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Account")>  _
Partial Public Class Account
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AccountID As String
	
	Private _Username As String
	
	Private _Password As String
	
	Private _Roles As String
	
	Private _Email As String
	
	Private _LogInTimes As EntitySet(Of LogInTime)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnAccountIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnRolesChanging(value As String)
    End Sub
    Partial Private Sub OnRolesChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LogInTimes = New EntitySet(Of LogInTime)(AddressOf Me.attach_LogInTimes, AddressOf Me.detach_LogInTimes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property AccountID() As String
		Get
			Return Me._AccountID
		End Get
		Set
			If (String.Equals(Me._AccountID, value) = false) Then
				Me.OnAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountID = value
				Me.SendPropertyChanged("AccountID")
				Me.OnAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Roles", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Roles() As String
		Get
			Return Me._Roles
		End Get
		Set
			If (String.Equals(Me._Roles, value) = false) Then
				Me.OnRolesChanging(value)
				Me.SendPropertyChanging
				Me._Roles = value
				Me.SendPropertyChanged("Roles")
				Me.OnRolesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_LogInTime", Storage:="_LogInTimes", ThisKey:="AccountID", OtherKey:="AccountID")>  _
	Public Property LogInTimes() As EntitySet(Of LogInTime)
		Get
			Return Me._LogInTimes
		End Get
		Set
			Me._LogInTimes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LogInTimes(ByVal entity As LogInTime)
		Me.SendPropertyChanging
		entity.Account = Me
	End Sub
	
	Private Sub detach_LogInTimes(ByVal entity As LogInTime)
		Me.SendPropertyChanging
		entity.Account = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LendReturn")>  _
Partial Public Class LendReturn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LendReturnID As String
	
	Private _BookID As String
	
	Private _StudentID As String
	
	Private _LendFrom As Date
	
	Private _LendTo As Date
	
	Private _ReturnDate As System.Nullable(Of Date)
	
	Private _OverdueDate As String
	
	Private _AccountID As String
	
	Private _Student As EntityRef(Of Student)
	
	Private _Book As EntityRef(Of Book)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLendReturnIDChanging(value As String)
    End Sub
    Partial Private Sub OnLendReturnIDChanged()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnLendFromChanging(value As Date)
    End Sub
    Partial Private Sub OnLendFromChanged()
    End Sub
    Partial Private Sub OnLendToChanging(value As Date)
    End Sub
    Partial Private Sub OnLendToChanged()
    End Sub
    Partial Private Sub OnReturnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReturnDateChanged()
    End Sub
    Partial Private Sub OnOverdueDateChanging(value As String)
    End Sub
    Partial Private Sub OnOverdueDateChanged()
    End Sub
    Partial Private Sub OnAccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnAccountIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Student = CType(Nothing, EntityRef(Of Student))
		Me._Book = CType(Nothing, EntityRef(Of Book))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LendReturnID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property LendReturnID() As String
		Get
			Return Me._LendReturnID
		End Get
		Set
			If (String.Equals(Me._LendReturnID, value) = false) Then
				Me.OnLendReturnIDChanging(value)
				Me.SendPropertyChanging
				Me._LendReturnID = value
				Me.SendPropertyChanged("LendReturnID")
				Me.OnLendReturnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				If Me._Book.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StudentID() As String
		Get
			Return Me._StudentID
		End Get
		Set
			If (String.Equals(Me._StudentID, value) = false) Then
				If Me._Student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LendFrom", DbType:="Date NOT NULL")>  _
	Public Property LendFrom() As Date
		Get
			Return Me._LendFrom
		End Get
		Set
			If ((Me._LendFrom = value)  _
						= false) Then
				Me.OnLendFromChanging(value)
				Me.SendPropertyChanging
				Me._LendFrom = value
				Me.SendPropertyChanged("LendFrom")
				Me.OnLendFromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LendTo", DbType:="Date NOT NULL")>  _
	Public Property LendTo() As Date
		Get
			Return Me._LendTo
		End Get
		Set
			If ((Me._LendTo = value)  _
						= false) Then
				Me.OnLendToChanging(value)
				Me.SendPropertyChanging
				Me._LendTo = value
				Me.SendPropertyChanged("LendTo")
				Me.OnLendToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReturnDate", DbType:="Date")>  _
	Public Property ReturnDate() As System.Nullable(Of Date)
		Get
			Return Me._ReturnDate
		End Get
		Set
			If (Me._ReturnDate.Equals(value) = false) Then
				Me.OnReturnDateChanging(value)
				Me.SendPropertyChanging
				Me._ReturnDate = value
				Me.SendPropertyChanged("ReturnDate")
				Me.OnReturnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OverdueDate", DbType:="VarChar(50)")>  _
	Public Property OverdueDate() As String
		Get
			Return Me._OverdueDate
		End Get
		Set
			If (String.Equals(Me._OverdueDate, value) = false) Then
				Me.OnOverdueDateChanging(value)
				Me.SendPropertyChanging
				Me._OverdueDate = value
				Me.SendPropertyChanged("OverdueDate")
				Me.OnOverdueDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountID() As String
		Get
			Return Me._AccountID
		End Get
		Set
			If (String.Equals(Me._AccountID, value) = false) Then
				Me.OnAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountID = value
				Me.SendPropertyChanged("AccountID")
				Me.OnAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_LendReturn", Storage:="_Student", ThisKey:="StudentID", OtherKey:="StudentID", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.LendReturns.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LendReturns.Add(Me)
					Me._StudentID = value.StudentID
				Else
					Me._StudentID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_LendReturn", Storage:="_Book", ThisKey:="BookID", OtherKey:="BookID", IsForeignKey:=true)>  _
	Public Property Book() As Book
		Get
			Return Me._Book.Entity
		End Get
		Set
			Dim previousValue As Book = Me._Book.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Book.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Book.Entity = Nothing
					previousValue.LendReturns.Remove(Me)
				End If
				Me._Book.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LendReturns.Add(Me)
					Me._BookID = value.BookID
				Else
					Me._BookID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Book")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LogInTime")>  _
Partial Public Class LogInTime
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AccountID As String
	
	Private _Username As String
	
	Private _LoginTime As Date
	
	Private _ID As String
	
	Private _Account As EntityRef(Of Account)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAccountIDChanging(value As String)
    End Sub
    Partial Private Sub OnAccountIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnLoginTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnLoginTimeChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Account = CType(Nothing, EntityRef(Of Account))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountID() As String
		Get
			Return Me._AccountID
		End Get
		Set
			If (String.Equals(Me._AccountID, value) = false) Then
				If Me._Account.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountID = value
				Me.SendPropertyChanged("AccountID")
				Me.OnAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginTime", DbType:="Date NOT NULL")>  _
	Public Property LoginTime() As Date
		Get
			Return Me._LoginTime
		End Get
		Set
			If ((Me._LoginTime = value)  _
						= false) Then
				Me.OnLoginTimeChanging(value)
				Me.SendPropertyChanging
				Me._LoginTime = value
				Me.SendPropertyChanged("LoginTime")
				Me.OnLoginTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Account_LogInTime", Storage:="_Account", ThisKey:="AccountID", OtherKey:="AccountID", IsForeignKey:=true)>  _
	Public Property Account() As Account
		Get
			Return Me._Account.Entity
		End Get
		Set
			Dim previousValue As Account = Me._Account.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Account.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Account.Entity = Nothing
					previousValue.LogInTimes.Remove(Me)
				End If
				Me._Account.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LogInTimes.Add(Me)
					Me._AccountID = value.AccountID
				Else
					Me._AccountID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Account")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Book")>  _
Partial Public Class Book
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookID As String
	
	Private _BookName As String
	
	Private _BookDesc As String
	
	Private _BookAuthor As String
	
	Private _BookStatus As String
	
	Private _BookFines As EntitySet(Of BookFine)
	
	Private _LendReturns As EntitySet(Of LendReturn)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookIDChanging(value As String)
    End Sub
    Partial Private Sub OnBookIDChanged()
    End Sub
    Partial Private Sub OnBookNameChanging(value As String)
    End Sub
    Partial Private Sub OnBookNameChanged()
    End Sub
    Partial Private Sub OnBookDescChanging(value As String)
    End Sub
    Partial Private Sub OnBookDescChanged()
    End Sub
    Partial Private Sub OnBookAuthorChanging(value As String)
    End Sub
    Partial Private Sub OnBookAuthorChanged()
    End Sub
    Partial Private Sub OnBookStatusChanging(value As String)
    End Sub
    Partial Private Sub OnBookStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BookFines = New EntitySet(Of BookFine)(AddressOf Me.attach_BookFines, AddressOf Me.detach_BookFines)
		Me._LendReturns = New EntitySet(Of LendReturn)(AddressOf Me.attach_LendReturns, AddressOf Me.detach_LendReturns)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BookID() As String
		Get
			Return Me._BookID
		End Get
		Set
			If (String.Equals(Me._BookID, value) = false) Then
				Me.OnBookIDChanging(value)
				Me.SendPropertyChanging
				Me._BookID = value
				Me.SendPropertyChanged("BookID")
				Me.OnBookIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BookName() As String
		Get
			Return Me._BookName
		End Get
		Set
			If (String.Equals(Me._BookName, value) = false) Then
				Me.OnBookNameChanging(value)
				Me.SendPropertyChanging
				Me._BookName = value
				Me.SendPropertyChanged("BookName")
				Me.OnBookNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookDesc", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property BookDesc() As String
		Get
			Return Me._BookDesc
		End Get
		Set
			If (String.Equals(Me._BookDesc, value) = false) Then
				Me.OnBookDescChanging(value)
				Me.SendPropertyChanging
				Me._BookDesc = value
				Me.SendPropertyChanged("BookDesc")
				Me.OnBookDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookAuthor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BookAuthor() As String
		Get
			Return Me._BookAuthor
		End Get
		Set
			If (String.Equals(Me._BookAuthor, value) = false) Then
				Me.OnBookAuthorChanging(value)
				Me.SendPropertyChanging
				Me._BookAuthor = value
				Me.SendPropertyChanged("BookAuthor")
				Me.OnBookAuthorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookStatus", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BookStatus() As String
		Get
			Return Me._BookStatus
		End Get
		Set
			If (String.Equals(Me._BookStatus, value) = false) Then
				Me.OnBookStatusChanging(value)
				Me.SendPropertyChanging
				Me._BookStatus = value
				Me.SendPropertyChanged("BookStatus")
				Me.OnBookStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_BookFine", Storage:="_BookFines", ThisKey:="BookID", OtherKey:="BookID")>  _
	Public Property BookFines() As EntitySet(Of BookFine)
		Get
			Return Me._BookFines
		End Get
		Set
			Me._BookFines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Book_LendReturn", Storage:="_LendReturns", ThisKey:="BookID", OtherKey:="BookID")>  _
	Public Property LendReturns() As EntitySet(Of LendReturn)
		Get
			Return Me._LendReturns
		End Get
		Set
			Me._LendReturns.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BookFines(ByVal entity As BookFine)
		Me.SendPropertyChanging
		entity.Book = Me
	End Sub
	
	Private Sub detach_BookFines(ByVal entity As BookFine)
		Me.SendPropertyChanging
		entity.Book = Nothing
	End Sub
	
	Private Sub attach_LendReturns(ByVal entity As LendReturn)
		Me.SendPropertyChanging
		entity.Book = Me
	End Sub
	
	Private Sub detach_LendReturns(ByVal entity As LendReturn)
		Me.SendPropertyChanging
		entity.Book = Nothing
	End Sub
End Class
